import { FlagType, CountryCodeList } from './types';
import Fuse from 'fuse.js';
const localData = {
    emojiCountries: undefined,
    imageCountries: undefined
};
export const loadData = ((data) => (dataType = FlagType.EMOJI) => {
    switch (dataType) {
        case FlagType.FLAT:
            if (!data.imageCountries) {
                data.imageCountries = require('./assets/data/countries-image.json');
            }
            return data.imageCountries;
        default:
            if (!data.emojiCountries) {
                data.emojiCountries = require('./assets/data/countries-emoji.json');
            }
            return data.emojiCountries;
    }
})(localData);
export const getEmojiFlag = (countryCode = 'FR') => {
    const countries = loadData();
    if (!countries) {
        throw new Error('Unable to find emoji because emojiCountries is undefined');
    }
    return countries[countryCode].flag;
};
export const getImageFlag = (countryCode = 'FR') => {
    const countries = loadData(FlagType.FLAT);
    if (!countries) {
        throw new Error('Unable to find image because imageCountries is undefined');
    }
    return countries[countryCode].flag;
};
export const getCountryName = (countryCode = 'FR', translation = 'common') => {
    const countries = loadData();
    if (!countries) {
        throw new Error('Unable to find image because imageCountries is undefined');
    }
    return countries[countryCode].name
        ? countries[countryCode].name[translation]
        : countries[countryCode].name['common'];
};
export const getCountryCallingCode = (countryCode) => {
    const countries = loadData();
    if (!countries) {
        throw new Error('Unable to find image because imageCountries is undefined');
    }
    return countries[countryCode].callingCode[0];
};
export const getCountryCurrency = (countryCode) => {
    const countries = loadData();
    if (!countries) {
        throw new Error('Unable to find image because imageCountries is undefined');
    }
    return countries[countryCode].currency[0];
};
export const getCountry = (countryCode) => {
    const countries = loadData();
    if (!countries) {
        throw new Error('Unable to find image because imageCountries is undefined');
    }
    return countries[countryCode].callingCode[0];
};
const isCountryPresent = (countries) => (countryCode) => !!countries[countryCode];
const isRegion = (region) => (country) => region ? country.region === region : true;
const isSubregion = (subregion) => (country) => subregion ? country.subregion === subregion : true;
export const getCountries = (flagType, translation = 'common', region, subregion) => {
    const countriesRaw = loadData(flagType);
    if (!countriesRaw) {
        return [];
    }
    const countries = CountryCodeList.filter(isCountryPresent(countriesRaw))
        .map((cca2) => ({
        cca2,
        ...{
            ...countriesRaw[cca2],
            name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']
        }
    }))
        .filter(isRegion(region))
        .filter(isSubregion(subregion))
        .sort((country1, country2) => country1.name.localeCompare(country2.name));
    return countries;
};
const DEFAULT_FUSE_OPTION = {
    shouldSort: true,
    threshold: 0.6,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 1,
    keys: ['name', 'callingCode']
};
let fuse;
export const search = (filter = '', data = [], options = DEFAULT_FUSE_OPTION) => {
    if (data.length === 0) {
        return [];
    }
    if (!fuse) {
        fuse = new Fuse(data, options);
    }
    if (filter && filter !== '') {
        const result = fuse.search(filter);
        return result;
    }
    else {
        return data;
    }
};
const uniq = (arr) => Array.from(new Set(arr));
export const getLetters = (countries) => {
    return uniq(countries
        .map((country) => country.name.substr(0, 1).toLocaleUpperCase())
        .sort((l1, l2) => l1.localeCompare(l2)));
};
//# sourceMappingURL=CountryService.js.map